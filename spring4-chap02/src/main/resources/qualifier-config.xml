<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config />   <!--다수의 스프링 전처리기 Bean을 스프링 컨테이너에 등록해준다.-->

    <!--동일한 타입의 class를 정의하고 @AutoWired 를 적용하면 스프링은 어떤 Bean 객체를 주입해야하는지 알 수 없으므로 익셉션 발생
        단, @AutoWired를 적용한 메서드의 파라미터 이름과 bean id 값이 동일 한 경우 해당 객체가 주입된다.
    -->
    <bean id="orderSearchClientFactory" class="practice.spring.search.SearchClientFactory">
        <qualifier value="order" /> <!--qualifier를 지정해놓으면 위와 같은 문제가 있을 경우 지정된 객체가 반환된다. 자바 코드에서 애노테이션으로도 가능(@Qualifier)-->
        <constructor-arg index="0" value="127.0.0.1"/>
        <constructor-arg index="1" value="8888"/>
        <constructor-arg index="2" value="json"/>
        <constructor-arg index="3" value="utf8"/>
    </bean>

    <bean id="productSearchClientFactory" class="practice.spring.search.SearchClientFactory">
        <constructor-arg index="0" value="127.0.0.1"/>
        <constructor-arg index="1" value="8889"/>
        <constructor-arg index="2" value="json"/>
        <constructor-arg index="3" value="utf8"/>
    </bean>

    <bean id="productService" class="practice.spring.ProductService"></bean>

</beans>